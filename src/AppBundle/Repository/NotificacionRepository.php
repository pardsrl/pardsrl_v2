<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Persona;
use Doctrine\ORM\QueryBuilder;

/**
 * NotificacionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificacionRepository extends \Doctrine\ORM\EntityRepository
{

    public function getQb()
    {
        return $this->createQueryBuilder('notif');
    }

    public function getSistema()
    {
        $qb = $this->getQb()
            ->where('notif.sistema = true')
	        ->orderBy('notif.fechaCreacion','DESC');

        return $qb;
    }

    /**
     * Obtiene Notificaciones filtradas por Persona. Las retorna ordenadas por fecha de creaciÃ³n de forma descendente.
     *
     * @param Persona $persona
     * @return QueryBuilder
     */
    public function getByPersona(Persona $persona)
    {

        $qb = $this->getQb()
            ->innerJoin('notif.distribucion', 'dist')
            ->leftJoin('dist.equipo', 'eq')
            ->leftJoin('eq.personas', 'personas')
            ->where('dist.persona = :persona')
            ->orWhere('personas = :persona')
            ->orderBy('notif.fechaCreacion', 'DESC');

        $qb->setParameter('persona', $persona);

        return $qb;
    }
    
    
    
//    public function getIdsNotificacionesLeidasByPersona(Persona $persona)
//    {
//
//        $neRepository = $this->getEntityManager()->getRepository('AppBundle:NotificacionEstado');
//
//        $qb = $neRepository->createQueryBuilder('ne')
//            ->select('notif2.id')
//            ->innerJoin('ne.notificacion', 'notif2')
//            ->where('ne.leido = true')
//            ->andWhere('ne.persona = :persona');
//
//        $qb->setParameter('persona', $persona);
//
//        return $qb;
//    }

    public function getPersonalesNoLeidas(Persona $persona)
    {
        $neRepository = $this->getEntityManager()->getRepository('AppBundle:NotificacionEstado');

        $qb1 = $this->getByPersona($persona);

        $qb2 = $neRepository->getIdsNotificacionesLeidasByPersona($persona);

        $qb1->andWhere($qb1->expr()->notIn(
            'notif.id', $qb2->getDQL()
        ));

        return $qb1;
    }


    public function getCantidadPersonalesNoLeidas(Persona $persona)
    {

        $qb = $this->getPersonalesNoLeidas($persona);

        $qb->select($qb->expr()->count('notif'));

        return $qb->getQuery()->getSingleScalarResult();

    }

	public function getSistemaNoLeidas(Persona $persona){

		$neRepository = $this->getEntityManager()->getRepository('AppBundle:NotificacionEstado');

		$qb1 = $this->getSistema();

		$qb2 = $neRepository->getIdsNotificacionesLeidasByPersona($persona);

		$qb1->andWhere($qb1->expr()->notIn(
			'notif.id', $qb2->getQuery()->getDQL()
		));

		//hack para setear los parametros de qb2 en qb1
		$qb1->setParameters($qb2->getParameters());

		return $qb1;
	}


	public function getCantidadSistemaNoLeidas(Persona $persona){

		$qb = $this->getSistemaNoLeidas($persona);

		$qb->select($qb->expr()->count('notif'));

		return $qb->getQuery()->getSingleScalarResult();
    }


    public function getUltimos(QueryBuilder $qb, $max)
    {
        return $qb->setMaxResults($max);
    }

	/**
	 * Obtiene todas las notificaciones para una persona dada, incluso las que son de sistema.
	 *
	 * @param Persona $persona
	 *
	 * @return QueryBuilder
	 */
    public function getTodasNotificaciones(Persona $persona){
    	$qb = $this->getQb()
	               ->leftJoin('notif.distribucion', 'dist')
	               ->leftJoin('dist.equipo', 'eq')
	               ->leftJoin('eq.personas', 'personas')
	               ->where('dist.persona = :persona')
	               ->orWhere('personas = :persona')
	               ->orWhere('notif.sistema = true')
	               ->orderBy('notif.fechaCreacion', 'DESC');

	    $qb->setParameter('persona', $persona);

	    return $qb;
    }
}
